// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controllers/profile_controller.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entities "social_network/internal/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockProfilesService is a mock of ProfilesService interface.
type MockProfilesService struct {
	ctrl     *gomock.Controller
	recorder *MockProfilesServiceMockRecorder
}

// MockProfilesServiceMockRecorder is the mock recorder for MockProfilesService.
type MockProfilesServiceMockRecorder struct {
	mock *MockProfilesService
}

// NewMockProfilesService creates a new mock instance.
func NewMockProfilesService(ctrl *gomock.Controller) *MockProfilesService {
	mock := &MockProfilesService{ctrl: ctrl}
	mock.recorder = &MockProfilesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfilesService) EXPECT() *MockProfilesServiceMockRecorder {
	return m.recorder
}

// GetProfiles mocks base method.
func (m *MockProfilesService) GetProfiles(arg0 context.Context) ([]entities.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles", arg0)
	ret0, _ := ret[0].([]entities.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles.
func (mr *MockProfilesServiceMockRecorder) GetProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockProfilesService)(nil).GetProfiles), arg0)
}

// SaveProfile mocks base method.
func (m *MockProfilesService) SaveProfile(arg0 context.Context, arg1 *entities.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProfile indicates an expected call of SaveProfile.
func (mr *MockProfilesServiceMockRecorder) SaveProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfile", reflect.TypeOf((*MockProfilesService)(nil).SaveProfile), arg0, arg1)
}
